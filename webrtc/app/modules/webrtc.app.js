// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define(function(require) {
  var $, DataChannelApp, MainLayout, WebRTCApp, contentTemplate, marionette, vent, _;
  $ = require('jquery');
  _ = require('underscore');
  marionette = require('marionette');
  vent = require('./core/vent');
  DataChannelApp = require('./dataChannel/dataChannelApp');
  contentTemplate = require("text!modules/content.tmpl");
  MainLayout = (function(_super) {

    __extends(MainLayout, _super);

    MainLayout.prototype.template = contentTemplate;

    MainLayout.prototype.regions = {
      menu: "#menu",
      content: "#content"
    };

    MainLayout.prototype.events = {
      "click .chatStart": function() {
        return vent.trigger("chat:start");
      },
      "click .chatStop": function() {
        return vent.trigger("chat:stop");
      }
    };

    function MainLayout(options) {
      MainLayout.__super__.constructor.call(this, options);
    }

    return MainLayout;

  })(Backbone.Marionette.Layout);
  WebRTCApp = (function(_super) {

    __extends(WebRTCApp, _super);

    WebRTCApp.prototype.root = "/WebAppExperiments/webrtc/index.html/";

    WebRTCApp.prototype.title = "WebRtcExperiment";

    WebRTCApp.prototype.regions = {
      headerRegion: "#header",
      mainRegion: "#content"
    };

    function WebRTCApp(options) {
      this.onInitializeAfter = __bind(this.onInitializeAfter, this);

      this.onStart = __bind(this.onStart, this);

      this.initLayout = __bind(this.initLayout, this);
      WebRTCApp.__super__.constructor.call(this, options);
      this.vent = vent;
      this.addRegions(this.regions);
      this.on("initialize:before", this.onInitializeBefore);
      this.on("initialize:after", this.onInitializeAfter);
      this.on("start", this.onStart);
      this.vent.on("app:started", this.onAppStarted);
      this.vent.on("dropbox:login", this.onDropboxLoginRequested);
      this.vent.on("folder:create", this.createFolder);
      this.initLayout();
    }

    WebRTCApp.prototype.initLayout = function() {
      this.layout = new MainLayout();
      return this.headerRegion.show(this.layout);
    };

    WebRTCApp.prototype.initSettings = function() {
      this.settings = new Settings();
      return this.bindTo(this.settings.get("General"), "change", this.settingsChanged);
    };

    WebRTCApp.prototype.onStart = function() {
      var dataChannelApp;
      console.log("app started");
      dataChannelApp = new DataChannelApp({
        regions: {
          mainRegion: "#content"
        }
      });
      return dataChannelApp.start();
    };

    WebRTCApp.prototype.onAppStarted = function(appName) {
      return console.log("I see app: " + appName + " has started");
    };

    WebRTCApp.prototype.onInitializeBefore = function() {
      return console.log("before init");
    };

    WebRTCApp.prototype.onInitializeAfter = function() {
      "For exampel here close and 'please wait while app loads' display";
      return console.log("after init");
    };

    return WebRTCApp;

  })(Backbone.Marionette.Application);
  return WebRTCApp;
});
