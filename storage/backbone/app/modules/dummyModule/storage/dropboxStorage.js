// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(function(require) {
    var $, Backbone, DropBoxStorage, Dropbox, LocalStorage, store, _;
    $ = require('jquery');
    _ = require('underscore');
    Backbone = require('backbone');
    LocalStorage = require('localstorage');
    Dropbox = require("dropbox");
    DropBoxStorage = (function() {

      function DropBoxStorage() {
        this.sync = __bind(this.sync, this);

        this.authentificate = __bind(this.authentificate, this);
        this.client = new Dropbox.Client({
          key: "h8OY5h+ah3A=|AS0FmmbZJrmc8/QbpU6lMzrCd5lSGZPCKVtjMlA7ZA==",
          sandbox: true
        });
      }

      DropBoxStorage.prototype.authentificate = function() {
        var _this = this;
        this.client.authDriver(new Dropbox.Drivers.Redirect({
          rememberUser: true,
          useQuery: true
        }));
        return this.client.authenticate(function(error, client) {
          if (error) {
            return _this.showError(error);
          }
          return _this.validated();
        });
      };

      DropBoxStorage.prototype.signOut = function() {
        var _this = this;
        return this.client.signOut(function(error) {
          if (!(error != null)) {
            return console.log("signout ok");
          }
        });
      };

      DropBoxStorage.prototype.validated = function() {
        return console.log("all is fine");
      };

      DropBoxStorage.prototype.showError = function(error) {
        console.log("error in dropbox");
        switch (error.status) {
          case 401:
            break;
          case 404:
            break;
          case 507:
            break;
          case 503:
            break;
          case 400:
            break;
          case 403:
            break;
          case 405:
            break;
        }
      };

      DropBoxStorage.prototype.sync = function(method, model, options) {
        var id;
        console.log("dropbox storage");
        console.log("method " + method);
        console.log("model");
        console.log(model);
        console.log("options");
        console.log(options);
        switch (method) {
          case 'read':
            console.log("reading");
            return this.findAll(model, options);
          case 'create':
            console.log("creating");
            if (!model.id) {
              model.set(model.id, model.idAttribute);
            }
            console.log("id" + model.get("id"));
            id = model.id;
            if (model.get("ext")) {
              id = "" + id + "." + (model.get('ext'));
            }
            this.writeFile(id, JSON.stringify(model));
            return model.toJSON();
          case 'update':
            console.log("updating");
            id = model.id;
            if (model.get("ext")) {
              id = "" + id + "." + (model.get('ext'));
            }
            if (model.collection.path != null) {
              id = "" + model.collection.path + "/" + id;
            }
            console.log("id: " + id);
            this.writeFile(id, JSON.stringify(model));
            return model.toJSON();
          case 'delete':
            console.log("deleting");
            console.log(model);
            id = model.id;
            if (model.get("ext")) {
              id = "" + id + "." + (model.get('ext'));
            }
            if (model.collection.path != null) {
              id = "" + model.collection.path + "/" + id;
            }
            return this.remove(id);
        }
      };

      DropBoxStorage.prototype.find = function(model) {
        return JSON.parse(this.localStorage().getItem(this.name + "-" + model.id));
      };

      DropBoxStorage.prototype.findAll = function(model, options) {
        var error, fetchData, promise, promises, results, success, truc,
          _this = this;
        success = options.success;
        error = options.error;
        promises = [];
        promise = this.readDir("/");
        model.trigger('fetch', model, null, options);
        results = [];
        fetchData = function(fileName) {
          var p;
          console.log("got " + fileName);
          p = _this.readFile2(fileName);
          return p.then(function(data) {
            promises.push;
            console.log("Data: " + data);
            return results.push(data);
          });
        };
        truc = function(entries) {
          var fileName, _i, _len, _results;
          console.log("args", arguments);
          _results = [];
          for (_i = 0, _len = entries.length; _i < _len; _i++) {
            fileName = entries[_i];
            console.log("filename: " + fileName);
            _results.push(promises.push(_this.readFile2(fileName)));
          }
          return _results;
        };
        return $.when(promise).then(truc).pipe.apply($, promises).done(function() {
          console.log("args", arguments[0]);
          console.log("ALL DONE", results);
          return model.trigger('reset', results);
        });
        /*  
        $.when.apply($, promises).done ()=>
          arguments[0]
          console.log("ALL DONE", results)
          model.trigger('reset',results)
        */

        /*
              
                for fileName in entries
                  
                model.trigger('reset')
                #options.success(res)
        */

        /*
              callback = (entries)=>
                console.log entries
                console.log "Entries nb"+entries.length
                for fileName in entries
                  console.log fileName
                  readFileContent= (fileContent)=>
                    console.log "fileContent"
                    console.log fileContent
                    @resultOfFindAll.push(JSON.parse(fileContent))
                  @readFile(readFileContent,fileName)
        */

      };

      DropBoxStorage.prototype.remove = function(name) {
        return this.client.remove(name, function(error, userInfo) {
          if (error) {
            return showError(error);
          }
          return console.log("removed " + name);
        });
      };

      DropBoxStorage.prototype.writeFile = function(name, content) {
        var _this = this;
        return this.client.writeFile(name, content, function(error, stat) {
          if (error) {
            return _this.showError(error);
          }
          return console.log("File saved as revision " + stat.versionTag);
        });
      };

      DropBoxStorage.prototype.createFolder = function(name) {
        var _this = this;
        return this.client.mkdir(name, function(error, stat) {
          if (error) {
            return _this.showError(error);
          }
          return console.log("folder create ok");
        });
      };

      DropBoxStorage.prototype.readDir = function(path) {
        var d,
          _this = this;
        d = $.Deferred();
        this.client.readdir(path, function(error, entries) {
          if (error) {
            return _this.showError(error);
          }
          return d.resolve(entries);
        });
        return d.promise();
      };

      DropBoxStorage.prototype.readDir2 = function(path) {
        return this.client.readdir("/");
      };

      DropBoxStorage.prototype.readFile = function(callback, path) {
        var _this = this;
        return this.client.readFile(path, function(error, data) {
          if (error) {
            return _this.showError(error);
          }
          return callback(data);
        });
      };

      DropBoxStorage.prototype.readFile2 = function(path) {
        var d,
          _this = this;
        d = $.Deferred();
        this.client.readFile(path, function(error, data) {
          if (error) {
            return _this.showError(error);
          }
          return d.resolve(data);
        });
        return d.promise();
      };

      return DropBoxStorage;

    })();
    store = new DropBoxStorage;
    return store;
  });

}).call(this);
