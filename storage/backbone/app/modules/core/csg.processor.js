// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(function(require) {
    var CoffeeScript, CsgProcessor, CsgProcessorMin;
    CoffeeScript = require('CoffeeScript');
    CsgProcessorMin = (function() {

      function CsgProcessorMin() {
        this.rebuildSolid = __bind(this.rebuildSolid, this);

      }

      CsgProcessorMin.prototype.construtor = function() {
        return this.debug = true;
      };

      CsgProcessorMin.prototype.processScript = function(script, filename) {
        var csg;
        csg = null;
        filename = !filename ? "coffeescad.coscad" : void 0;
        filename = filename.replace(/\.coscad$/i, "");
        this.paramDefinitions = [];
        this.paramControls = [];
        this.script = null;
        this.script = this.compileFormatCoffee(script);
        this.filename = filename;
        csg = this.rebuildSolid();
        return csg;
      };

      CsgProcessorMin.prototype.processIncludes = function(source) {
        var includes, match, pattern;
        pattern = new RegExp(/(?:\s??include\s??)(?:\"([\w\//:'%~+#-.*]+)\")/g);
        match = pattern.exec(source);
        includes = [];
        while (match) {
          includes.push(match[1]);
          match = pattern.exec(source);
        }
        pattern = new RegExp(/(?:\s??include\s??)(?:\(\"([\w\//:'%~+#-.*]+)\"\))/g);
        match = pattern.exec(source);
        while (match) {
          includes.push(match[1]);
          match = pattern.exec(source);
        }
        return includes;
      };

      CsgProcessorMin.prototype.compileFormatCoffee = function(source) {
        var app, csgSugar, formated, fullSource, inc, includeSrc, includes, index, lib, libsSource, mainPart, project, textblock,
          _this = this;
        csgSugar = require("modules/csg.sugar");
        app = require("app");
        lib = app.lib;
        window.include = function(options) {
          var pp;
          return pp = pp;
        };
        libsSource = "";
        includes = this.processIncludes(source);
        for (index in includes) {
          inc = includes[index];
          project = lib.fetch({
            id: inc
          });
          if (project != null) {
            mainPart = project.pfiles.at(0);
            if (mainPart != null) {
              includeSrc = mainPart.get("content");
              libsSource += includeSrc + "\n";
            }
          }
        }
        libsSource += "\n";
        fullSource = csgSugar + libsSource + source;
        textblock = CoffeeScript.compile(fullSource, {
          bare: true
        });
        formated = "function main()";
        formated += "{";
        formated += textblock;
        formated += "}\n";
        if (this.debug_ing) {
          console.log("Formated scad " + formated);
        }
        return formated;
      };

      CsgProcessorMin.prototype.rebuildSolid = function() {
        var obj, paramValues;
        this.debug = true;
        if (this.debug === true) {
          this.processing = true;
          paramValues = null;
          try {
            obj = this.parseJsCadScriptSync(this.script, paramValues, this.debugging);
            obj = this.convertToSolid(obj);
            this.processing = false;
            return obj;
          } catch (error) {
            this.processing = false;
            throw error;
          }
        }
      };

      CsgProcessorMin.prototype.parseJsCadScriptSync = function(script, mainParameters, debugging) {
        var f, result, workerscript;
        workerscript = "";
        workerscript += script;
        if (this.debuging) {
          workerscript += "\n\n\n\n\n\n\n/* -------------------------------------------------------------------------\n";
          workerscript += "OpenJsCad debugging\n\nAssuming you are running Chrome:\nF10 steps over an instruction\nF11 steps into an instruction\n";
          workerscript += "F8  continues running\nPress the (||) button at the bottom to enable pausing whenever an error occurs\n";
          workerscript += "Click on a line number to set or clear a breakpoint\n";
          workerscript += "For more information see: http://code.google.com/chrome/devtools/docs/overview.html\n\n";
          workerscript += "------------------------------------------------------------------------- */\n";
          workerscript += "\n\n// Now press F11 twice to enter your main() function:\n\n";
          workerscript += "debugger;\n";
        }
        workerscript += "return main(" + JSON.stringify(mainParameters) + ");";
        f = new Function(workerscript);
        result = f();
        return result;
      };

      CsgProcessorMin.prototype.convertToSolid = function(obj) {
        if ((typeof obj === "object") && (obj instanceof CAG)) {
          obj = obj.extrude({
            offset: [0, 0, 0.1]
          });
        } else if ((typeof obj === "object") && (obj instanceof CSG)) {

        } else {
          throw new Error("Cannot convert to solid");
        }
        return obj;
      };

      return CsgProcessorMin;

    })();
    CsgProcessor = (function() {

      function CsgProcessor(debug, currentObject, statusdiv, viewer) {
        this.currentObject = currentObject;
        this.statusdiv = statusdiv;
        this.viewer = viewer;
        this.rebuildSolid = __bind(this.rebuildSolid, this);

        this.setCurrentObject = __bind(this.setCurrentObject, this);

        console.log("in processor init");
        this.debug = debug != null ? debug : true;
        console.log("debug " + this.debug + ",@statusdiv : " + this.statusdiv + ", @viewer: " + this.viewer);
      }

      CsgProcessor.prototype.abort = function() {};

      CsgProcessor.prototype.setError = function(errorMsg) {
        return console.log("ERROR: " + errorMsg);
      };

      CsgProcessor.prototype.setCurrentObject = function(obj) {
        var csg, ext;
        this.currentObject = obj;
        if (this.viewer) {
          csg = this.convertToSolid(obj);
          this.viewer.setCsg(csg);
        }
        this.hasValidCurrentObject = true;
        ext = this.extensionForCurrentObject();
      };

      CsgProcessor.prototype.convertToSolid = function(obj) {
        if ((typeof obj === "object") && (obj instanceof CAG)) {
          obj = obj.extrude({
            offset: [0, 0, 0.1]
          });
        } else if ((typeof obj === "object") && (obj instanceof CSG)) {

        } else {
          throw new Error("Cannot convert to solid");
        }
        return obj;
      };

      CsgProcessor.prototype.extensionForCurrentObject = function() {
        extension;

        var extension;
        if (this.currentObject instanceof CSG) {
          extension = "stl";
        } else if (this.currentObject instanceof CAG) {
          extension = "dxf";
        } else {
          throw new Error("Not supported");
        }
        return extension;
      };

      CsgProcessor.prototype.clearViewer = function() {
        this.clearOutputFile();
        this.setCurrentObject(new CSG());
        this.hasValidCurrentObject = false;
        return this.enableItems();
      };

      CsgProcessor.prototype.clearOutputFile = function() {
        if (this.hasOutputFile) {
          this.hasOutputFile = false;
          if (this.outputFileDirEntry) {
            this.outputFileDirEntry.removeRecursively(function() {});
            this.outputFileDirEntry = null;
          }
          if (this.outputFileBlobUrl) {
            OpenJsCad.revokeBlobUrl(this.outputFileBlobUrl);
            this.outputFileBlobUrl = null;
          }
          this.enableItems();
          if (this.onchange) {
            return this.onchange();
          }
        }
      };

      CsgProcessor.prototype.enableItems = function() {};

      /*
          runMainInWorker: (mainParams) -> 
            try
              #TODO: adapt this to coffeescad
              if (typeof(main) != 'function') 
                throw new Error('Your jscad file should contain a function main() which returns a CSG solid or a CAG area.')
                #OpenJsCad.log.prevLogTime = Date.now()
                result = main(mainParameters);
                if( (typeof(result) != "object") || ((!(result instanceof CSG)) && (!(result instanceof CAG))))
                  throw new Error("Your main() function should return a CSG solid or a CAG area.")
                result_compact = result.toCompactBinary()
                result = null # not needed anymore
                #self.postMessage({cmd: 'rendered', result: result_compact});
                
            catch error
              errorTxt = error.stack
              if errtxt?
                errorTxt = error.toString()
                postMessage({cmd: 'error', err: errorTxt})
      */


      CsgProcessor.prototype.parseJsCadScriptSync = function(script, mainParameters, debugging) {
        var f, result, workerscript;
        workerscript = "";
        workerscript += script;
        if (this.debuging) {
          workerscript += "\n\n\n\n\n\n\n/* -------------------------------------------------------------------------\n";
          workerscript += "OpenJsCad debugging\n\nAssuming you are running Chrome:\nF10 steps over an instruction\nF11 steps into an instruction\n";
          workerscript += "F8  continues running\nPress the (||) button at the bottom to enable pausing whenever an error occurs\n";
          workerscript += "Click on a line number to set or clear a breakpoint\n";
          workerscript += "For more information see: http://code.google.com/chrome/devtools/docs/overview.html\n\n";
          workerscript += "------------------------------------------------------------------------- */\n";
          workerscript += "\n\n// Now press F11 twice to enter your main() function:\n\n";
          workerscript += "debugger;\n";
        }
        workerscript += "return main(" + JSON.stringify(mainParameters) + ");";
        f = new Function(workerscript);
        result = f();
        return result;
      };

      CsgProcessor.prototype.parseCoffeesCadScriptSync = function(script, mainParameters, debugging) {
        var f, result, workerscript;
        workerscript = "";
        workerscript += script;
        if (this.debuging) {
          workerscript += "\n\n\n\n\n\n\n/* -------------------------------------------------------------------------\n";
          workerscript += "OpenJsCad debugging\n\nAssuming you are running Chrome:\nF10 steps over an instruction\nF11 steps into an instruction\n";
          workerscript += "F8  continues running\nPress the (||) button at the bottom to enable pausing whenever an error occurs\n";
          workerscript += "Click on a line number to set or clear a breakpoint\n";
          workerscript += "For more information see: http://code.google.com/chrome/devtools/docs/overview.html\n\n";
          workerscript += "------------------------------------------------------------------------- */\n";
          workerscript += "\n\n// Now press F11 twice to enter your main() function:\n\n";
          workerscript += "debugger;\n";
        }
        workerscript += "return main(" + JSON.stringify(mainParameters) + ");";
        f = new Function(workerscript);
        result = f();
        return result;
      };

      CsgProcessor.prototype.setCoffeeSCad = function(script, filename) {
        var scripthaserrors;
        filename = !filename ? "openjscad.jscad" : void 0;
        filename = filename.replace(/\.jscad$/i, "");
        this.clearViewer();
        this.paramDefinitions = [];
        this.paramControls = [];
        this.script = null;
        scripthaserrors = false;
        try {

        } catch (e) {
          this.setError(e.toString());
          scripthaserrors = true;
        }
        if (!scripthaserrors) {
          this.script = this.compileFormatCoffee(script);
          this.filename = filename;
          return this.rebuildSolid();
        } else {

        }
      };

      CsgProcessor.prototype.createParamControls = function() {
        var captions, control, errorprefix, i, label, option, paramControls, paramdef, selectedindex, tablerows, td, tr, type, valueindex, values, _i, _j, _ref, _ref1;
        this.paramControls = [];
        paramControls = [];
        tablerows = [];
        for (i = _i = 0, _ref = this.paramDefinitions.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          errorprefix = "Error in parameter definition #" + (i + 1) + ": ";
          paramdef = this.paramDefinitions[i];
          if (!(__indexOf.call(paramdef, 'name') >= 0)) {
            throw new Error(errorprefix + "Should include a 'name' parameter");
          }
          type = "text";
          type = __indexOf.call(paramdef, 'type') >= 0 ? paramdef.type : void 0;
          if ((type !== "text") && (type !== "int") && (type !== "float") && (type !== "choice")) {
            throw new Error(errorprefix + "Unknown parameter type '" + type + "'");
          }
          control = null;
          if ((type === "text") || (type === "int") || (type === "float")) {
            control = document.createElement("input");
            control.type = "text";
            if ((__indexOf.call(paramdef, 'default') >= 0)) {
              control.value = paramdef["default"];
            } else {
              if ((type === "int") || (type === "float")) {
                control.value = "0";
              } else {
                control.value = "";
              }
            }
          } else if (type === "choice") {
            if (!(__indexOf.call(paramdef, 'values') >= 0)) {
              throw new Error(errorprefix + "Should include a 'values' parameter");
            }
            control = document.createElement("select");
            values = paramdef.values;
            captions = null;
            if (__indexOf.call(paramdef, 'captions') >= 0) {
              captions = paramdef.captions;
              if (captions.length !== values.length) {
                throw new Error(errorprefix + "'captions' and 'values' should have the same number of items");
              }
            } else {
              captions = values;
            }
            selectedindex = 0;
            for (valueindex = _j = 0, _ref1 = values.length; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; valueindex = 0 <= _ref1 ? ++_j : --_j) {
              option = document.createElement("option");
              option.value = values[valueindex];
              option.text = captions[valueindex];
              control.add(option);
              if (__indexOf.call(paramdef, 'default') >= 0) {
                if (paramdef["default"] === values[valueindex]) {
                  selectedindex = valueindex;
                }
              }
            }
            if (values.length > 0) {
              control.selectedIndex = selectedindex;
            }
          }
          paramControls.push(control);
          tr = document.createElement("tr");
          td = document.createElement("td");
          label = paramdef.name + ":";
          if (__indexOf.call(paramdef, 'caption') >= 0) {
            label = paramdef.caption;
          }
          td.innerHTML = label;
          tr.appendChild(td);
          td = document.createElement("td");
          td.appendChild(control);
          tr.appendChild(td);
          tablerows.push(tr);
        }
        tablerows.map(function(tr) {
          return this.parameterstable.appendChild(tr);
        });
        return this.paramControls = paramControls;
      };

      CsgProcessor.prototype.getParamDefinitions = function(script) {
        var f, params, script1, scriptisvalid;
        scriptisvalid = true;
        try {
          f = new Function(script);
          f();
        } catch (e) {
          scriptisvalid = false;
        }
        params = [];
        if (scriptisvalid) {
          script1 = "if(typeof(getParameterDefinitions) == 'function') {return getParameterDefinitions();} else {return [];} ";
          script1 += script;
          f = new Function(script1);
          params = f();
          if ((typeof params !== "object") || (typeof params.length !== "number")) {
            throw new Error("The getParameterDefinitions() function should return an array with the parameter definitions");
          }
        }
        return params;
      };

      CsgProcessor.prototype.getParamValues = function() {
        var control, i, isnumber, paramValues, paramdef, type, value, _i, _ref;
        if (this.debug) {
          console.log("Getting param values");
          console.log("" + this.paramDefinitions.length);
        }
        paramValues = {};
        for (i = _i = 0, _ref = this.paramDefinitions.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          paramdef = this.paramDefinitions[i];
          type = "text";
          if (__indexOf.call(paramdef, 'type') >= 0) {
            type = paramdef.type;
          }
          control = this.paramControls[i];
          value = "";
          if ((type === "text") || (type === "float") || (type === "int")) {
            value = control.value;
            if ((type === "float") || (type === "int")) {
              isnumber = !isNaN(parseFloat(value)) && isFinite(value);
              if (!isnumber) {
                throw new Error("Not a number: " + value);
              }
              if (type === "int") {
                value = parseInt(value);
              } else {
                value = parseFloat(value);
              }
            }
          } else if (type === "choice") {
            value = control.options[control.selectedIndex].value;
          }
          paramValues[paramdef.name] = value;
        }
        if (this.debug) {
          console.log("Finished getting param values");
        }
        return paramValues;
      };

      CsgProcessor.prototype.rebuildSolid = function() {
        var errtxt, obj, paramValues, useSync;
        if (this.debug) {
          this.processing = true;
          paramValues = null;
          useSync = this.debug;
          if (!useSync) {
            try {
              this.worker = this.parseJsCadScriptASync(this.script, paramValues, function(err, obj) {
                this.processing = false;
                this.worker = null;
                if (err) {
                  return this.setError(err);
                } else {
                  return this.setCurrentObject(obj);
                }
              });
              this.enableItems();
            } catch (e) {
              useSync = true;
            }
          }
          if (useSync) {
            try {
              obj = this.parseJsCadScriptSync(this.script, paramValues, this.debugging);
              this.setCurrentObject(obj);
              return this.processing = false;
            } catch (e) {
              this.processing = false;
              errtxt = e.stack;
              if (!errtxt) {
                errtxt = e.toString();
              }
              return this.setError(errtxt);
            }
          }
        }
      };

      CsgProcessor.prototype.preprocessCode = function(code) {
        /*   
        function getMethods(obj)
        {
            var res = [];
            for(var m in obj) {
                if(typeof obj(m) == "function") {
                    res.push(m)
                }
            }
            return res;
        }
        
        for (prop in CSG)
        {
            //console.log("CSG has property " + prop);
        }
            
          console.log(getMethods(CSG));
          
          var objs = Object.getOwnPropertyNames(CSG);
        for(var i in objs ){
          console.log(objs[i]);
        }
        */

      };

      return CsgProcessor;

    })();
    return CsgProcessorMin;
  });

}).call(this);
